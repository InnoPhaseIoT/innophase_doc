Programming Talaria TWO over SWD
---------------------------------
The INP3000 Programmer board version 4.0 has the SWD interface to
program Talaria TWO modules.

Install the appropriate dependencies for programming over JTAG.

In Windows
~~~~~~~~~~~~~~~

1. Open command prompt and reset the device in a boot loader mode by
   executing the following command from the SDK directory:

+-----------------------------------------------------------------------+
| .\\script\\reset.py evk42_bl                                          |
+=======================================================================+
+-----------------------------------------------------------------------+

|A black background with white text Description automatically generated|

Figure 18: SWD- Resetting the device in boot loader mode- Console output
(Windows)

2. In the same terminal start OpenOCD by executing the following command
   from the SDK directory:

+-----------------------------------------------------------------------+
| openocd -s .\\conf -f ftdi_swd.cfg -f t2_swd.cfg                      |
+=======================================================================+
+-----------------------------------------------------------------------+

The following output is observed on the command prompt console:

|A computer screen shot of a black screen Description automatically
generated|

Figure 19: SWD - Starting OpenOCD – console output – Windows

3. In a separate command prompt window, execute the following command
   from the SDK directory:

+-----------------------------------------------------------------------+
| .\\pc_tools\\T2_Flasher\\bin\\T2_Flasher_Windows.exe                  |
| --operation=write_ptable .\\<path to the standard_part_table.json     |
| file available in sdk_x.y/tools/partition_files directory>            |
+=======================================================================+
+-----------------------------------------------------------------------+

The following output is observed after flashing the default partition
table:

|A computer screen with white text Description automatically generated|

Figure 20: SWD - Flashing the default partition table – console output

4. In the same terminal, execute the following command from the SDK
   directory to flash the data image (data.img).

**Note**: This step is needed only if the application uses any
certificates.

+-----------------------------------------------------------------------+
| .\\pc_tools\\T2_Flasher\\bin\\T2_Flasher_Windows.exe                  |
| --operation=write_part --partition=DATA .\\<path to the generated     |
| data image>\\data.img                                                 |
+=======================================================================+
+-----------------------------------------------------------------------+

The following output is observed after flashing the data image:

|A screenshot of a computer screen Description automatically generated|

Figure 21: SWD - Flashing the data image - console output

a. To generate the application image, refer section: *In Windows*. In
   the same terminal, execute the following command from the SDK
   directory to flash the application image:

+-----------------------------------------------------------------------+
| .\\pc_tools\\T2_Flasher\\bin\\T2_Flasher_Windows.exe                  |
| --operation=write_part --partition=BOOT .\\<path to the generated     |
| application image>\\app.img                                           |
+=======================================================================+
+-----------------------------------------------------------------------+

..

   The following output is observed after flashing the application
   image:

   |A screenshot of a computer program Description automatically
   generated|

Figure 22: SWD - Flashing the application image - console output

b. In the same terminal, flash the VM image of the application by
   executing the following command:

+-----------------------------------------------------------------------+
| .\\pc_tools\\T2_Flasher\\bin\\T2_Flasher_Windows.exe                  |
| --operation=write_part --partition=VIRT .\\<path to the generated     |
| application image.vm>\\app.img.vm                                     |
+=======================================================================+
+-----------------------------------------------------------------------+

..

   The following output is observed after flashing the application’s VM
   image:

   |image1|

Figure 23: SWD - Flashing application's VM image - console output

   The application is successfully flashed over SWD. Now, OpenOCD needs
   to be terminated before debugging using Eclipse. Close all the
   command prompt windows to terminate OpenOCD.

5. On INP3000 version 4.0, the console output can be seen using the
   Download Tool by clicking the reset button.

For more details on using the Download tool, refer document:
UG_Download_Tool.pdf (path: *sdk_x.y\\pc_tools\\Download_Tool\\doc*).

|image2|

Figure 24: INP3000 version 4.0 - Download tool console output – Windows

In Linux
~~~~~~~~~~~~~

1. Open command prompt and reset the device in boot loader mode by
   executing the following command from the SDK directory:

+-----------------------------------------------------------------------+
| ./script/reset.py evk42_bl                                            |
+=======================================================================+
+-----------------------------------------------------------------------+

|image3|

Figure 25: SWD - Resetting the device in boot loader mode- console
output (Windows)

2. Open the command prompt and start OpenOCD by executing the following
   command from the SDK directory:

+-----------------------------------------------------------------------+
| openocd -s ./conf -f ftdi_swd.cfg -f t2_swd.cfg                       |
+=======================================================================+
+-----------------------------------------------------------------------+

The following output is seen on command prompt console:

|A computer screen shot of a computer code Description automatically
generated|

Figure 26: SWD - Starting OpenOCD – console output

3. Flash the default partition table by executing the following command:

+-----------------------------------------------------------------------+
| ./pc_tools/T2_Flasher/bin/T2_Flasher_Linux --operation=write_ptable   |
| .\\<path to the standard_part_table.json file available in            |
| sdk_x.y/tools/partition_files directory>                              |
+=======================================================================+
+-----------------------------------------------------------------------+

Following output is observed after flashing the default partition table:

|A computer screen shot of a computer program Description automatically
generated|

Figure 27: SWD - Flashing the default partition table – console output

4. In the same terminal, execute the following command from the SDK
   directory to flash the data image (data.img).

**Note**: This step is needed only if the application uses any
certificates.

+-----------------------------------------------------------------------+
| ./pc_tools/T2_Flasher/bin/T2_Flasher_Linux --operation=write_part     |
| --partition=DATA ./<path to the generated data image>/data.img        |
+=======================================================================+
+-----------------------------------------------------------------------+

The following output is observed after flashing the data image:

|image4|

   Figure 28: SWD - Flashing the data image - console output

5. In a separate command prompt window, execute the following command
   from the SDK directory to flash the application image:

+-----------------------------------------------------------------------+
| ./pc_tools/T2_Flasher/bin/T2_Flasher_Linux --operation=write_part     |
| --partition=BOOT ./<path to the generated application image>/app.img  |
+=======================================================================+
+-----------------------------------------------------------------------+

Following output is observed after flashing the application image:

|image5|

   Figure 29: SWD - Flashing the application image - console output

6. In the same terminal, flash the VM image of the application by
   executing the following command:

+-----------------------------------------------------------------------+
| ./pc_tools/T2_Flasher/bin/T2_Flasher_Linux –operation=write_part      |
| –partition=VIRT ./<path to the generated application                  |
| image.vm>./app.img.vm                                                 |
+=======================================================================+
+-----------------------------------------------------------------------+

Following output is observed after flashing the application’s VM image:

|image6|

Figure 30: SWD - Flashing application's VM image – console output

The application is successfully flashed over SWD. Now, OpenOCD needs to
be terminated before debugging using Eclipse. Close all the command
prompt windows to terminate OpenOCD.

7. On INP3000 version 4.0, the console output can be seen using the
   Download Tool by clicking on a reset button.

For more details on using the Download tool, refer document:
UG_Download_Tool.pdf (path: *sdk_x.y\\pc_tools\\Download_Tool\\doc*).

|A screenshot of a computer Description automatically generated|

Figure 31: INP3000 version 4.0 - Download tool console output – Linux

.. |A black background with white text Description automatically generated| image:: media/image1.png
   :width: 5.90551in
   :height: 0.70233in
.. |A computer screen shot of a black screen Description automatically generated| image:: media/image2.png
   :width: 5.90551in
   :height: 2.6999in
.. |A computer screen with white text Description automatically generated| image:: media/image3.png
   :width: 5.90551in
   :height: 2.15267in
.. |A screenshot of a computer screen Description automatically generated| image:: media/image4.png
   :width: 5.90551in
   :height: 3.13031in
.. |A screenshot of a computer program Description automatically generated| image:: media/image5.png
   :width: 5.11811in
   :height: 2.60875in
.. |image1| image:: media/image6.png
   :width: 5.11811in
   :height: 3.43884in
.. |image2| image:: media/image7.png
   :width: 5.51181in
   :height: 7.43752in
.. |image3| image:: media/image8.png
   :width: 5.90551in
   :height: 0.72616in
.. |A computer screen shot of a computer code Description automatically generated| image:: media/image9.png
   :width: 5.90833in
   :height: 2.89167in
.. |A computer screen shot of a computer program Description automatically generated| image:: media/image10.png
   :width: 6.69291in
   :height: 3.17864in
.. |image4| image:: media/image11.png
   :width: 6.69291in
   :height: 4.20087in
.. |image5| image:: media/image12.png
   :width: 6.69291in
   :height: 4.1976in
.. |image6| image:: media/image13.png
   :width: 6.69291in
   :height: 4.19529in
.. |A screenshot of a computer Description automatically generated| image:: media/image14.png
   :width: 7.08661in
   :height: 3.1168in
